class Solution {
    public int trapRainWater(int[][] heightMap) {
        int m = heightMap.length;
        int n = heightMap[0].length;
        if (m <= 2 || n <= 2) return 0; 

        boolean[][] visited = new boolean[m][n];
        PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));

        // Add all boundary cells to the heap
        for (int i = 0; i < m; i++) {
            pq.offer(new int[]{heightMap[i][0], i, 0});
            visited[i][0] = true;
            
            pq.offer(new int[]{heightMap[i][n - 1], i, n - 1});
            visited[i][n - 1] = true;
        }
        for (int j = 1; j < n - 1; j++) {
            pq.offer(new int[]{heightMap[0][j], 0, j});
            visited[0][j] = true;

            pq.offer(new int[]{heightMap[m - 1][j], m - 1, j});
            visited[m - 1][j] = true;
        }

        int water = 0;
        int[][] dirs = {{0,1}, {1,0}, {0,-1}, {-1,0}};

        while (!pq.isEmpty()) {
            int[] cell = pq.poll();
            int height = cell[0]; 
            int i = cell[1]; 
            int j = cell[2];

            for (int[] dir : dirs) {
                int ni = i + dir[0], nj = j + dir[1];
                if (ni >= 0 && nj >= 0 && ni < m && nj < n && !visited[ni][nj]) {
                    visited[ni][nj] = true;
                    int neighborHeight = heightMap[ni][nj];
                    water += Math.max(0, height - neighborHeight);
                    pq.offer(new int[]{Math.max(height, neighborHeight), ni, nj});
                }
            }
        }

        return water;
    }
}
