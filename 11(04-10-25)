class Solution {
     /*Approach 1: Brute Force(time complexity : O(n^2))*/
    public int maxArea1(int[] height) {
        int n = height.length;
        int max = 0;
        for(int i=0; i<n-1; i++){
            for(int j=i+1; j<n; j++){
                int t = Math.min(height[i], height[j]) * (j-i);
                if(max < t){
                    max = t;
                }
            }
        }
        return max;
    }


    /*Approach 2: Two Pointer Approach (Optimal Solution)*/
    
    public int maxArea(int[] height){
        int n = height.length;
        int i = 0;
        int j = n-1;
        int max = 0;
        for(int k=0; k<n; k++){
            int area = Math.min(height[i], height[j]) * (j-i);
            max = Math.max(max, area);
            if(height[i] < height[j]){
                i++;
            }
            else{
                j--;
            }
        }
        return max;
    }
}
