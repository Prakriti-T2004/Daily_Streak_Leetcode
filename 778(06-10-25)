class Solution {
    public int swimInWater(int[][] grid) {

        int n = grid.length;

        int l = grid[0][0];
        int r = (int)Math.pow(n,2) - 1;  // time : O(log n^2)/

        int result = 0;

        while(l<=r){
            int mid = l+(r-l)/2;
            boolean[][]  visited = new boolean[n][n];

            if(possibleToReach(grid, n, 0, 0, mid, visited)){
                result = mid;
                r = mid-1;               
            }
            else{
                l = mid + 1;
            }
        }
        return result;
    }

    public boolean possibleToReach(int[][] grid, int n, int i, int j, int t, boolean[][] visited){
        if(i < 0 || i >= n || j < 0 || j >= n || visited[i][j] == true || grid[i][j] > t){
            return false;
        }

        visited[i][j] = true;

        if(i == n-1 && j == n-1){
            return true;
        }
        int[][] directions = {{1,0}, {-1,0}, {0,1}, {0,-1}};

        for(int[] dir : directions){
            int i_ = i + dir[0];
            int j_ = j + dir[1];

            if(possibleToReach(grid, n, i_, j_, t, visited)){
                return true;
            }
        }
        return false;
    }
}
